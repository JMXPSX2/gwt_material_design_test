package gwt.material.design.addins.client.splitpanel;

import com.google.gwt.core.client.GWT;
import com.google.gwt.resources.client.ResourcePrototype;

public class MaterialSplitPanelDebugClientBundle_default_InlineClientBundleGenerator implements gwt.material.design.addins.client.splitpanel.MaterialSplitPanelDebugClientBundle {
  private static MaterialSplitPanelDebugClientBundle_default_InlineClientBundleGenerator _instance0 = new MaterialSplitPanelDebugClientBundle_default_InlineClientBundleGenerator();
  private void splitPanelDarkCssInitializer() {
    splitPanelDarkCss = new com.google.gwt.resources.client.TextResource() {
      // jar:file:/Users/jmxpsx/.m2/repository/com/github/gwtmaterialdesign/gwt-material-addins/2.4.0/gwt-material-addins-2.4.0.jar!/gwt/material/design/addins/client/splitpanel/resources/css/touchsplitter-dark.css
      public String getText() {
        return ".TouchSplitter,\r\n.TouchSplitter > div {\r\n    background: #353535;\r\n}";
      }
      public String getName() {
        return "splitPanelDarkCss";
      }
    }
    ;
  }
  private static class splitPanelDarkCssInitializer {
    static {
      _instance0.splitPanelDarkCssInitializer();
    }
    static com.google.gwt.resources.client.TextResource get() {
      return splitPanelDarkCss;
    }
  }
  public com.google.gwt.resources.client.TextResource splitPanelDarkCss() {
    return splitPanelDarkCssInitializer.get();
  }
  private void splitPanelDebugCssInitializer() {
    splitPanelDebugCss = new com.google.gwt.resources.client.TextResource() {
      // jar:file:/Users/jmxpsx/.m2/repository/com/github/gwtmaterialdesign/gwt-material-addins/2.4.0/gwt-material-addins-2.4.0.jar!/gwt/material/design/addins/client/splitpanel/resources/css/touchsplitter.css
      public String getText() {
        return ".TouchSplitter,\r\n.TouchSplitter > div {\r\n    overflow: hidden;\r\n    background: #e9e9e9;\r\n}\r\n\r\n.TouchSplitter.h-ts > div {\r\n    height: 100%;\r\n    width: 42%;\r\n    width: calc(50% - .5em);\r\n}\r\n\r\n.TouchSplitter.v-ts > div {\r\n    width: 100%;\r\n    height: 42%;\r\n    height: calc(50% - .5em);\r\n}\r\n\r\n.TouchSplitter > div {\r\n    display: block;\r\n    margin: 0;\r\n    padding: 0;\r\n    float: left;\r\n}\r\n\r\n.TouchSplitter.h-ts > div.splitter-bar {\r\n    width: 1em;\r\n    cursor: col-resize\r\n}\r\n\r\n.TouchSplitter.v-ts > div.splitter-bar {\r\n    height: 1em;\r\n    cursor: row-resize\r\n}\r\n\r\n.TouchSplitter > div.splitter-bar.dock > div {\r\n    width: 1em;\r\n    height: 1em;\r\n    background-repeat: no-repeat;\r\n    background-position: center;\r\n}\r\n\r\n.TouchSplitter,\r\n.TouchSplitter > div,\r\n.TouchSplitter > div.splitter-bar > div {\r\n    position: relative;\r\n    margin: 0;\r\n    padding: 0;\r\n    -webkit-user-select: none;\r\n    -moz-user-select: none;\r\n    -ms-user-select: none;\r\n}\r\n\r\n.TouchSplitter > div.test-calc {\r\n    width: 10px;\r\n    width: calc(10px + 10px);\r\n}\r\n\r\n.TouchSplitter > div.test-em {\r\n    width: 1em;\r\n}\r\n\r\n.TouchSplitter > div.splitter-bar > div {\r\n    width: 0.2rem;\r\n    height: 1em;\r\n    position: relative;\r\n    background: white;\r\n}\r\n\r\n.TouchSplitter.h-ts > div.splitter-bar > div {\r\n    margin-top: 0px;\r\n    top: 50%;\r\n    margin-left: 25%;\r\n    height: 20px;\r\n    width: 50%;\r\n}\r\n\r\n.TouchSplitter.v-ts > div.splitter-bar > div {\r\n    width: 20px;\r\n    line-height: 20px;\r\n    height: 4px;\r\n    position: absolute;\r\n    top: 0;\r\n    left: 0;\r\n    bottom: 0;\r\n    right: 0;\r\n    margin: auto;\r\n}";
      }
      public String getName() {
        return "splitPanelDebugCss";
      }
    }
    ;
  }
  private static class splitPanelDebugCssInitializer {
    static {
      _instance0.splitPanelDebugCssInitializer();
    }
    static com.google.gwt.resources.client.TextResource get() {
      return splitPanelDebugCss;
    }
  }
  public com.google.gwt.resources.client.TextResource splitPanelDebugCss() {
    return splitPanelDebugCssInitializer.get();
  }
  private void splitPanelDebugJsInitializer() {
    splitPanelDebugJs = new com.google.gwt.resources.client.TextResource() {
      // jar:file:/Users/jmxpsx/.m2/repository/com/github/gwtmaterialdesign/gwt-material-addins/2.4.0/gwt-material-addins-2.4.0.jar!/gwt/material/design/addins/client/splitpanel/resources/js/touchsplitter.js
      public String getText() {
        StringBuilder builder = new StringBuilder();
        builder.append("/* Generated by CoffeeScript 1.9.3 */\r\n\r\n/*\r\n * Touch Splitter JQuery was created by Cole Lawrence(github:ZombieHippie)\r\n * This work is licensed under the Creative Commons Attribution-ShareAlike 3.0\r\n * Unported License. To view a copy of this license, visit http://creativecommons.org/licenses/by-sa/3.0/.\r\n */\r\n\r\n(function() {\r\n  var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };\r\n\r\n  (function(mod) {\r\n    if (typeof exports === \"object\" && typeof module === \"object\") {\r\n      return mod(require(\"jquery\"));\r\n    } else if (typeof define === \"function\" && define.amd) {\r\n      return define([\"jquery\"], mod);\r\n    } else {\r\n      return mod(jQuery);\r\n    }\r\n  })(function(jQuery) {\r\n    var $, TouchSplitter;\r\n    $ = jQuery;\r\n    $.fn.touchSplit = function(options) {\r\n      if (options == null) {\r\n        options = {};\r\n      }\r\n      if (this[0].touchSplitter != null) {\r\n        throw \"Cannot make a splitter here! '\" + this.selector + \"' already has a splitter! Use $('\" + this.selector + \"')[0].touchSplitter.destroy(<optional side to remove>) to remove it!\";\r\n      }\r\n      if (this.children().length !== 2 && this.children().length !== 0) {\r\n        throw \"Cannot make a splitter here! Incorrect number of div children in '\" + this.selector + \"'\";\r\n      }\r\n      return this[0].touchSplitter = new TouchSplitter(this, options);\r\n    };\r\n    return TouchSplitter = (function() {\r\n      function TouchSplitter(element, options) {\r\n        var barThick, firstdiv, inners, match, splitterHTML, testCalc, testEm, thickness, units;\r\n        this.element = element;\r\n        this.resize = bind(this.resize, this);\r\n        this.onResize = bind(this.onResize, this);\r\n        this.onResizeWindow = bind(this.onResizeWindow, this);\r\n        this.getSecond = bind(this.getSecond, this);\r\n        this.getFirst = bind(this.getFirst, this);\r\n        this.stopDragging = bind(this.stopDragging, this);\r\n        this.drag = bind(this.drag, this);\r\n        this.startDragging = bind(this.startDragging, this);\r\n        this.onTouchEnd = bind(this.onTouchEnd, this);\r\n        this.onTouchMove = bind(this.onTouchMove, this);\r\n        this.onTouchStart = bind(this.onTouchStart, this);\r\n        this.onMouseDown = bind(this.onMouseDown, this);\r\n        this.setPercentages = bind(this.setPercentages, this);\r\n        this.setDock = bind(this.setDock, this);\r\n        this.moveBar = bind(this.moveBar, this);\r\n        this.on = bind(this.on, this);\r\n        this.toggleDock = bind(this.toggleDock, this);\r\n        this.setRatios = bind(this.setRatios, this);\r\n        this.destroy = bind(this.destroy, this);\r\n        this.element.addClass('TouchSplitter');\r\n        this.barPosition = options.barPosition;\r\n        this.support = {};\r\n        testEm = $('<div class=\"test-em\"></div>');\r\n        testEm.appendTo(this.element);\r\n        barThick = testEm.width();\r\n        testEm.remove();\r\n        testCalc = $('<div class=\"test-calc\"></div>');\r\n        testCalc.appendTo(this.element);\r\n        this.support.calc = false;\r\n        testCalc.remove();\r\n        if (options.orientation != null) {\r\n          if (options.orientation === \"vertical\") {\r\n            this.horizontal = false;\r\n          } else if (options.orientation === \"horizontal\") {\r\n\r\n          } else {\r\n            console.log(\"Touch Splitter ERROR: orientation cannot be:'\" + options.orientation + \"' defaulted to 'horizontal'\");\r\n          }\r\n        }\r\n        if (this.horizontal !== false) {\r\n          this.horizontal = true;\r\n        }\r\n        this.element.addClass(this.horizontal ? \"h-ts\" : \"v-ts\");\r\n        this.firstMin = options.leftMin || options.topMin || options.firstMin || 0;\r\n        this.firstMax = options.leftMax || options.topMax || options.firstMax || false;\r\n        this.secondMin = options.rightMin || options.bottomMin || options.secondMin || 0;\r\n        this.secondMax = options.rightMax || options.bottomMax || options.secondMax || false;\r\n        if (this.firstMax && this.secondMax) {\r\n          console.log(\"Touch Splitter ERROR: cannot set max bounds of both first and second sections!\");\r\n          this.secondMax = false;\r\n        }\r\n        if (options.dock != null) {\r\n          if (/both|left|top|first|right|bottom|second/i.test(options.dock)) {\r\n            this.docks = (function() {\r\n              switch (false) {\r\n                case !/both/i.test(options.dock):\r\n                  return {\r\n                    first: true,\r\n                    second: true,\r\n                    name: \"both\"\r\n                  };\r\n                case !/left|top|first/i.test(options.dock):\r\n                  return {\r\n                    first: true,\r\n                    second: false,\r\n                    name: \"first\"\r\n                  };\r\n                case !/right|bottom|second/i.test(options.dock):\r\n                  return {\r\n                    first: false,\r\n                    second: true,\r\n                    name: \"second\"\r\n                  };\r\n              }\r\n            })();\r\n          }\r\n        }\r\n        if (this.docks) {\r\n          this.element.addClass('docks-' + this.docks.name);\r\n        } else {\r\n          this.docks = {\r\n            first: false,\r\n            second: false,\r\n            name: false\r\n          };\r\n        }\r\n        if (options.thickness != null) {\r\n          thickness = options.thickness;\r\n          units = \"px\";\r\n          if (typeof thickness === 'string') {\r\n            if (match = thickness.match(/^([\\d\\.]+)([a-zA-Z]+)$/)) {\r\n              thickness = match[1];\r\n              units = match[2];\r\n            }\r\n            thickness = parseFloat(thickness);\r\n          }\r\n          if (!thickness) {\r\n            throw \"Unable to parse given thickness: \" + options.thickness;\r\n          } else {\r\n            thickness = (function() {\r\n              switch (units) {\r\n                case \"px\":\r\n                  return barThick = thickness;\r\n                case \"em\":\r\n                  return barThick *= thickness;\r\n                default:\r\n                  throw \"Invalid unit used in given thickness: \" + units;\r\n              }\r\n            })();\r\n          }\r\n        }\r\n        firstdiv = this.element.find(\">div:first\");\r\n        splitterHTML = \"<div class=\\\"splitter-bar\\\">\" + (this.docks.name && this.docks.name.match(/first|second/) ? '<div></div>' : '') + \"</div>\";\r\n        if (firstdiv.length === 0) {\r\n          inners = this.element.html();\r\n          this.element.html(\"<div></div> \" + splitterHTML + \" <div></div>\");\r\n          this.element.find(\">div:first\").html(inners);\r\n        } else {\r\n          firstdiv.after(splitterHTML);\r\n        }\r\n        this.barThicknessPx = barThick / 2;\r\n        this.barThickness = .04;\r\n        this.dragging = false;\r\n        this.initMouse = 0;\r\n        this.initBarPosition = 0;\r\n        this.resize();\r\n        this.element.on('resize', this.onResize);\r\n        $(window).on('resize', this.onResizeWindow);\r\n        $(window).on('mouseup', this.stopDragging);\r\n        $(window).on('mousemove', this.drag);\r\n        this.element.find('>.splitter-bar').on('mousedown', this.onMouseDown);\r\n        this.element.find('>.splitter-bar').bind('touchstart', this.onTouchStart);\r\n        this.element.on('touchmove', this.onTouchMove);\r\n        this.element.on('touchend', this.onTouchEnd);\r\n        this.element.on('touchleave', this.onTouchEnd);\r\n        this.element.on('touchcancel', this.onTouchEnd);\r\n      }\r\n\r\n      TouchSplitter.prototype.destroy = function(side) {\r\n        var toRemove;\r\n        this.element.off('resize');\r\n        $(window).off('resize');\r\n        $(window).off('mouseup');\r\n        $(window).off('mousemove');\r\n        this.element.find('>.splitter-bar').off('mousedown');\r\n        this.element.find('>.splitter-bar').off('touchstart');\r\n        this.element.off('touchmove');\r\n        this.element.off('touchend');\r\n        this.element.off('touchleave');\r\n        this.element.off('touchcancel');\r\n        this.element.find('>.splitter-bar').remove();\r\n        this.element.removeClass('TouchSplitter h-ts v-ts docks-first docks-second docks-both');\r\n        if (side != null) {\r\n          toRemove = (function() {\r\n            switch (side) {\r\n              case 'left':\r\n              case 'top':\r\n                return '>div:first';\r\n              case 'right':\r\n              case 'bottom':\r\n                return '>div:last';\r\n              case 'both':\r\n                return '>div';\r\n            }\r\n          })();\r\n          this.element.find(toRemove).remove();\r\n        }\r\n        this.element.children().css({\r\n          width: \"\",\r\n          height: \"\"\r\n        });\r\n        return delete this.element[0].touchSplitter;\r\n      };\r\n\r\n      TouchSplitter.prototype.setRatios = function() {\r\n        var conv, ref, val;\r\n        this.splitDistance = this.horizontal ? this.element.width() : this.element.height();\r\n        ref = {\r\n          firstMin: this.firstMin,\r\n          firstMax: this.firstMax,\r\n          secondMin: this.secondMin,\r\n          secondMax: this.secondMax\r\n        };\r\n        for (conv in ref) {\r\n          val = ref[conv];\r\n          if (val) {\r\n            this[conv + 'Ratio'] = val / this.splitDistance;\r\n          }\r\n        }\r\n        return this.moveBar();\r\n      };\r\n\r\n      TouchSplitter.prototype.toggleDock = function() {\r\n        this.element.toggleClass('docked');\r\n        if (this.docked) {\r\n          return this.setDock(false);\r\n        } else {\r\n          return this.setDock(this.docks.name);\r\n        }\r\n      };\r\n\r\n      TouchSplitter.prototype.on = function(eventName, fn) {\r\n        return this.element.on(eventName, fn);\r\n      };\r\n\r\n      TouchSplitter.prototype.moveBar = function(newX) {\r\n        var cursorPos, cursorPos2;\r\n        cursorPos = this.barPosition;\r\n        if (newX != null) {\r\n          cursorPos = this.initBarPosition + (newX - this.initMouse) / this.splitDistance;\r\n        }\r\n        cursorPos2 = 1 - cursorPos;\r\n        if (this.docks.name) {\r\n          switch (this.docked) {\r\n            case 'first':\r\n              if (cursorPos > this.firstMinRatio / 2) {\r\n                this.setDock(false);\r\n              }\r\n              break;\r\n            case 'second':\r\n              if (cursorPos2 > this.secondMinRatio / 2) {\r\n                this.setDock(false);\r\n              }\r\n              break;\r\n            default:\r\n              if (this.docks.first && cursorPos < this.firstMinRatio / 2) {\r\n                this.setDock('first');\r\n              }\r\n              if (this.docks.second && cursorPos2 < this.secondMinRatio / 2) {\r\n                this.setDock('second');\r\n              }\r\n          }\r\n        }\r\n        if (!this.docked) {\r\n          this.barPosition = (function() {\r\n            switch (false) {\r\n              case !(this.firstMaxRatio && cursorPos > this.firstMaxRatio):\r\n                return this.firstMaxRatio;\r\n              case !(cursorPos < this.firstMinRatio):\r\n                return this.firstMinRatio;\r\n              case !(this.secondMaxRatio && cursorPos2 > this.secondMaxRatio):\r\n                return 1 - this.secondMaxRatio;\r\n              case !(cursorPos2 < this.secondMinRatio):\r\n                return 1 - this.secondMinRatio;\r\n              default:\r\n                return cursorPos;\r\n            }\r\n          }).call(this);\r\n          return this.setPercentages();\r\n        }\r\n      };\r\n\r\n      TouchSplitter.prototype.setDock = function(val, lastpos) {\r\n        if (lastpos == null) {\r\n          lastpos = this.barPosition;\r\n        }\r\n        this.docked = val;\r\n        this.barPosition = this.lastPosition;\r\n        this.lastPosition = lastpos;\r\n        return this.setPercentages();\r\n      };\r\n\r\n      TouchSplitter.prototype.setPercentages = function() {\r\n        var attr, first, firstCss, pos, second, secondCss, shave;\r\n        switch (this.docked) {\r\n          case 'first':\r\n            this.barPosition = 0;\r\n            break;\r\n          case 'second':\r\n            this.barPosition = 1;\r\n        }\r\n        pos = this.barPosition;\r\n        firstCss = secondCss = \"\";\r\n        if (!this.support.calc) {\r\n          if (pos < this.barThickness) {\r\n            pos = this.barThickness;\r\n          }\r\n          if (pos > 1 - this.barThickness) {\r\n            pos = 1 - this.barThickness;\r\n          }\r\n          first = pos - this.barThickness;\r\n          second = 1 - pos - this.barThickness;\r\n          firstCss = (100 * first - this.barThickness) + \"%\";\r\n          secondCss = (100 * second - this.barThickness) + \"%\";\r\n        } else {\r\n          shave = this.barThicknessPx;\r\n          if (this.docked) {\r\n            shave *= 2;\r\n          }\r\n          pos *= 100;\r\n          firstCss = \"calc(\" + pos + \"% - \" + shave + \"px)\";\r\n          secondCss = \"calc(\" + (100 - pos) + \"% - \" + shave + \"px)\";\r\n        }\r\n        attr = this.horizontal ? \"width\" : \"height\";\r\n        this.getFirst().css(attr, firstCss);\r\n        return this.getSecond().css(attr, secondCss);\r\n      };\r\n\r\n      TouchSplitter.prototype.onMouseDown = function(event) {\r\n        event.preventDefault();\r\n        this.initMouse = this.horizontal ? event.clientX : event.clientY;\r\n        return this.startDragging(event);\r\n      };\r\n\r\n      TouchSplitter.prototype.onTouchStart = function(event) {\r\n        var orig;\r\n        orig = event.originalEvent;\r\n        this.initMouse = this.horizontal ? orig.changedTouches[0].pageX : orig.changedTouches[0].pageY;\r\n        return this.startDragging(event);\r\n      };\r\n\r\n      TouchSplitter.prototype.onTouchMove = function(event) {\r\n        var orig, page;\r\n        if (!this.dragging) {\r\n          return;\r\n        }\r\n        event.preventDefault();\r\n        orig = event.originalEvent;\r\n        page = this.horizontal ? orig.changedTouches[0].pageX : orig.changedTouches[0].pageY;\r\n        return this.moveBar(page);\r\n      };\r\n\r\n      TouchSplitter.prototype.onTouchEnd = function(event) {\r\n        return this.stopDragging(event);\r\n      };\r\n\r\n      TouchSplitter.prototype.startDragging = function(event) {\r\n        this.initBarPosition = this.barPosition;\r\n        this.isToggler = !!event.target.parentNode.className.match(/\\bsplitter-bar\\b/);\r\n        this.dragging = true;\r\n        return this.element.trigger(\"dragstart\");\r\n      };\r\n\r\n      TouchSplitter.prototype.drag = function(event) {\r\n        var client, whichM;\r\n        if (!this.dragging) {\r\n          return;\r\n        }\r\n        whichM = typeof event.buttons !== 'undefined' ? event.buttons : event.which;\r\n        if (whichM === 0) {\r\n          this.stopDragging();\r\n        }\r\n        client = this.horizontal ? event.clientX : event.clientY;\r\n        return this.moveBar(client);\r\n      };\r\n\r\n      TouchSplitter.prototype.stopDragging = function(event) {\r\n        if (this.dragging) {\r\n          this.dragging = false;\r\n          this.element.trigger(\"dragstop\");\r\n          if (this.isToggler) {\r\n            return setTimeout((function(_this) {\r\n              return function() {\r\n                if ((_this.barPosition - _this.initBarPosition) === 0) {\r\n                  return _this.toggleDock();\r\n                }\r\n              };\r\n            })(this), 0);\r\n          }\r\n        }\r\n      };\r\n\r\n      TouchSplitter.prototype.getFirst = function() {\r\n        return this.element.find('>div:first');\r\n      };\r\n\r\n      TouchSplitter.prototype.getSecond = function() {\r\n        return this.element.find('>div:last');\r\n      };\r\n\r\n      TouchSplitter.prototype.onResizeWindow = function(event) {\r\n        return this.resize();\r\n      };\r\n\r\n      TouchSplitter.prototype.onResize = function(event) {\r\n        if (event != null) {\r\n          event.stopPropagation();\r\n          if (!$(event.target).is(this.element)) {\r\n            return;\r\n          }\r\n        }\r\n        return this.resize();\r\n      };\r\n\r\n      TouchSplitter.prototype.resize = function() {\r\n        var attr;\r\n        this.setRatios();\r\n        attr = this.horizontal ? \"width\" : \"height\";\r\n        if (!this.support.calc) {\r\n          this.barThickness = this.barThicknessPx / this.splitDistance;\r\n          if (this.barThickness > 1) {\r\n            this.barThickness = 1;\r\n          }\r\n          this.element.find('>.splitter-bar').css(attr, this.barThickness * 200 + '%');\r\n        } else {\r\n          this.barThickness = 0;\r\n        }\r\n        return this.setPercentages();\r\n");
        builder.append("      };\r\n\r\n      return TouchSplitter;\r\n\r\n    })();\r\n  });\r\n\r\n}).call(this);\r\n");
        return builder.toString();
      }
      public String getName() {
        return "splitPanelDebugJs";
      }
    }
    ;
  }
  private static class splitPanelDebugJsInitializer {
    static {
      _instance0.splitPanelDebugJsInitializer();
    }
    static com.google.gwt.resources.client.TextResource get() {
      return splitPanelDebugJs;
    }
  }
  public com.google.gwt.resources.client.TextResource splitPanelDebugJs() {
    return splitPanelDebugJsInitializer.get();
  }
  private static java.util.HashMap<java.lang.String, com.google.gwt.resources.client.ResourcePrototype> resourceMap;
  private static com.google.gwt.resources.client.TextResource splitPanelDarkCss;
  private static com.google.gwt.resources.client.TextResource splitPanelDebugCss;
  private static com.google.gwt.resources.client.TextResource splitPanelDebugJs;
  
  public ResourcePrototype[] getResources() {
    return new ResourcePrototype[] {
      splitPanelDarkCss(), 
      splitPanelDebugCss(), 
      splitPanelDebugJs(), 
    };
  }
  public ResourcePrototype getResource(String name) {
    if (GWT.isScript()) {
      return getResourceNative(name);
    } else {
      if (resourceMap == null) {
        resourceMap = new java.util.HashMap<java.lang.String, com.google.gwt.resources.client.ResourcePrototype>();
        resourceMap.put("splitPanelDarkCss", splitPanelDarkCss());
        resourceMap.put("splitPanelDebugCss", splitPanelDebugCss());
        resourceMap.put("splitPanelDebugJs", splitPanelDebugJs());
      }
      return resourceMap.get(name);
    }
  }
  private native ResourcePrototype getResourceNative(String name) /*-{
    switch (name) {
      case 'splitPanelDarkCss': return this.@gwt.material.design.addins.client.splitpanel.MaterialSplitPanelDebugClientBundle::splitPanelDarkCss()();
      case 'splitPanelDebugCss': return this.@gwt.material.design.addins.client.splitpanel.MaterialSplitPanelDebugClientBundle::splitPanelDebugCss()();
      case 'splitPanelDebugJs': return this.@gwt.material.design.addins.client.splitpanel.MaterialSplitPanelDebugClientBundle::splitPanelDebugJs()();
    }
    return null;
  }-*/;
}
