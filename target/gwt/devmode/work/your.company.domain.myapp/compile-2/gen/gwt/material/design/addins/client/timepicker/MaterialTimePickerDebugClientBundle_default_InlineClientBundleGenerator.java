package gwt.material.design.addins.client.timepicker;

import com.google.gwt.core.client.GWT;
import com.google.gwt.resources.client.ResourcePrototype;

public class MaterialTimePickerDebugClientBundle_default_InlineClientBundleGenerator implements gwt.material.design.addins.client.timepicker.MaterialTimePickerDebugClientBundle {
  private static MaterialTimePickerDebugClientBundle_default_InlineClientBundleGenerator _instance0 = new MaterialTimePickerDebugClientBundle_default_InlineClientBundleGenerator();
  private void timepickerCssDebugInitializer() {
    timepickerCssDebug = new com.google.gwt.resources.client.TextResource() {
      // jar:file:/Users/jmxpsx/.m2/repository/com/github/gwtmaterialdesign/gwt-material-addins/2.4.0/gwt-material-addins-2.4.0.jar!/gwt/material/design/addins/client/timepicker/resources/css/timepicker.css
      public String getText() {
        StringBuilder builder = new StringBuilder();
        builder.append(".lolliclock-popover {\r\n    width: 196px;\r\n    height: 324px;\r\n    border-radius: 2px;\r\n    box-shadow: 0 2px 5px 0 rgba(0,0,0,0.26), 0 2px 10px 0 rgba(0,0,0,0.16);\r\n    font-family: \"Roboto\", 'Helvetica Neue, Helvetica, Arial', sans-serif;\r\n    background-color: #fff;\r\n    font-size: 20px;\r\n    user-select: none;\r\n    margin: auto;\r\n    width: 250px;\r\n    height: 380px;\r\n    margin-top: 10%;\r\n    z-index: 999;\r\n    position: relative;\r\n}\r\n\r\n/** landscape **/\r\n.landscape .lolliclock-popover{\r\n    width: 450px;\r\n    height: 250px;\r\n}\r\n\r\n.landscape .lolliclock-header{\r\n    display: inline-block !important;\r\n    vertical-align: middle !important;\r\n    width: 140px !important;\r\n    height: 100% !important;\r\n    padding-top: 20% !important;\r\n    padding-left: 10px !important;\r\n    animation: none !important;\r\n    -webkit-animation: none !important;\r\n    -moa-animation: none !important;\r\n}\r\n\r\n.landscape .popover-content{\r\n    display: inline-block !important;\r\n    vertical-align: top !important;\r\n    width: 310px !important;\r\n}\r\n\r\n.landscape .lolliclock-buttons{\r\n    margin-top: -40px !important;\r\n}\r\n\r\n.landscape .lolliclock-am-pm{\r\n    padding-left: 50px !important;\r\n    font-size: 20px !important;\r\n}\r\n\r\n.landscape .lolliclock-ampm-block{\r\n    display: none !important;\r\n}\r\n\r\n.clock-overlay{\r\n    position: fixed !important;\r\n    width: 100% !important;\r\n    top: 0 !important;\r\n    left: 0 !important;\r\n    bottom: 0 !important;\r\n    right: 0 !important;\r\n    height: 100% !important;\r\n    background: rgba(0,0,0,0.3);\r\n    z-index: 10000;\r\n}\r\n\r\n\r\n.lolliclock-popover.animate {\r\n    max-height: 0;\r\n    animation: open-popover 300ms forwards cubic-bezier(0.4, 0, 0.2, 1);\r\n    -webkit-animation: open-popover 300ms forwards cubic-bezier(0.4, 0, 0.2, 1);\r\n    -moz-animation: open-popover 300ms forwards cubic-bezier(0.4, 0, 0.2, 1);\r\n}\r\n.lolliclock-popover.animate-out {\r\n    animation: open-popover 150ms forwards reverse cubic-bezier(0.4, 0, 0.2, 1);\r\n    -webkit-animation: open-popover 150ms forwards reverse cubic-bezier(0.4, 0, 0.2, 1);\r\n    -moz-animation: open-popover 150ms forwards reverse cubic-bezier(0.4, 0, 0.2, 1);\r\n}\r\n.lolliclock-header {\r\n    background: #03a9f4;\r\n    height: 85px;\r\n    width: 250px;\r\n    display: flex;\r\n    color: #fff;\r\n    font-size: 2.3em;\r\n    font-weight: 400;\r\n    align-items: center;\r\n    justify-content: center;\r\n    overflow: hidden;\r\n}\r\n.lolliclock-header.animate {\r\n    height: 0;\r\n    animation: slide-header 150ms 150ms forwards cubic-bezier(0.4, 0, 0.2, 1);\r\n    -webkit-animation: slide-header 150ms 150ms forwards cubic-bezier(0.4, 0, 0.2, 1);\r\n    -moz-animation: slide-header 150ms 150ms forwards cubic-bezier(0.4, 0, 0.2, 1);\r\n}\r\n.lolliclock-header.animate-out {\r\n    animation: slide-header 150ms forwards reverse cubic-bezier(0.4, 0, 0.2, 1);\r\n    -webkit-animation: slide-header 150ms forwards reverse cubic-bezier(0.4, 0, 0.2, 1);\r\n    -moz-animation: slide-header 150ms forwards reverse cubic-bezier(0.4, 0, 0.2, 1);\r\n}\r\n.lolliclock-time {\r\n    display: flex;\r\n    align-self: center;\r\n}\r\n.lolliclock-primary-text {\r\n    color: #fff;\r\n}\r\n.lolliclock-hours {\r\n    width: 51px;\r\n    text-align: right;\r\n    opacity: 0.6;\r\n    cursor: pointer;\r\n    overflow: hidden;\r\n    height: 54px;\r\n}\r\n.lolliclock-colon {\r\n    opacity: 0.6;\r\n    cursor: default;\r\n}\r\n.lolliclock-minutes {\r\n    width: 51px;\r\n    opacity: 0.6;\r\n    cursor: pointer;\r\n    overflow: hidden;\r\n    height: 54px;\r\n}\r\n.lolliclock-am-pm {\r\n    cursor: pointer;\r\n    font-size: 10px;\r\n    top: 47px;\r\n    left: 157px;\r\n    opacity: 0.6;\r\n    padding: 3px;\r\n}\r\n.lolliclock-primary-text {\r\n    opacity: 1;\r\n}\r\n.lolliclock-time-old {\r\n    opacity: 1;\r\n    height: 54px;\r\n}\r\n.lolliclock-time-new {\r\n    opacity: 0;\r\n}\r\n.lolliclock-time .old-up {\r\n    animation: transition-top-up 300ms forwards cubic-bezier(0.4, 0, 0.2, 1);\r\n    -webkit-animation: transition-top-up 300ms forwards cubic-bezier(0.4, 0, 0.2, 1);\r\n    -moz-animation: transition-top-up 300ms forwards cubic-bezier(0.4, 0, 0.2, 1);\r\n}\r\n.lolliclock-time .new-up {\r\n    animation: transition-bottom-up 300ms forwards cubic-bezier(0.4, 0, 0.2, 1);\r\n    -webkit-animation: transition-bottom-up 300ms forwards cubic-bezier(0.4, 0, 0.2, 1);\r\n    -moz-animation: transition-bottom-up 300ms forwards cubic-bezier(0.4, 0, 0.2, 1);\r\n}\r\n.lolliclock-time .old-down {\r\n    animation: transition-top-up 300ms forwards reverse cubic-bezier(0.4, 0, 0.2, 1);\r\n    -webkit-animation: transition-top-up 300ms forwards reverse cubic-bezier(0.4, 0, 0.2, 1);\r\n    -moz-animation: transition-top-up 300ms forwards reverse cubic-bezier(0.4, 0, 0.2, 1);\r\n}\r\n.lolliclock-time .new-down {\r\n    animation: transition-bottom-up 300ms forwards reverse cubic-bezier(0.4, 0, 0.2, 1);\r\n    -webkit-animation: transition-bottom-up 300ms forwards reverse cubic-bezier(0.4, 0, 0.2, 1);\r\n    -moz-animation: transition-bottom-up 300ms forwards reverse cubic-bezier(0.4, 0, 0.2, 1);\r\n}\r\n.lolliclock-minutes .lolliclock-time-old.animate {\r\n    animation: transition-top-up 75ms 210ms forwards cubic-bezier(0.4, 0, 0.2, 1);\r\n    -webkit-animation: transition-top-up 75ms 210ms forwards cubic-bezier(0.4, 0, 0.2, 1);\r\n    -moz-animation: transition-top-up 75ms 210ms forwards cubic-bezier(0.4, 0, 0.2, 1);\r\n}\r\n.lolliclock-minutes .lolliclock-time-new.animate {\r\n    animation: transition-bottom-up 75ms 210ms forwards cubic-bezier(0.4, 0, 0.2, 1);\r\n    -webkit-animation: transition-bottom-up 75ms 210ms forwards cubic-bezier(0.4, 0, 0.2, 1);\r\n    -moz-animation: transition-bottom-up 75ms 210ms forwards cubic-bezier(0.4, 0, 0.2, 1);\r\n}\r\n.lolliclock-hours .lolliclock-time-old.animate {\r\n    animation: transition-top-up 75ms 225ms forwards cubic-bezier(0.4, 0, 0.2, 1);\r\n    -webkit-animation: transition-top-up 75ms 225ms forwards cubic-bezier(0.4, 0, 0.2, 1);\r\n    -moz-animation: transition-top-up 75ms 225ms forwards cubic-bezier(0.4, 0, 0.2, 1);\r\n}\r\n.lolliclock-hours .lolliclock-time-new.animate {\r\n    animation: transition-bottom-up 75ms 225ms forwards cubic-bezier(0.4, 0, 0.2, 1);\r\n    -webkit-animation: transition-bottom-up 75ms 225ms forwards cubic-bezier(0.4, 0, 0.2, 1);\r\n    -moz-animation: transition-bottom-up 75ms 225ms forwards cubic-bezier(0.4, 0, 0.2, 1);\r\n}\r\n.popover-content {\r\n    padding: 18px 14px;\r\n    width: 250px;\r\n    height: 203px;\r\n}\r\n.lolliclock-plate,\r\n.lolliclock-canvas,\r\n.lolliclock-dial {\r\n    width: 168px;\r\n    height: 168px;\r\n}\r\n.lolliclock-dial {\r\n    transition: all 300ms;\r\n    -webkit-transition: all 300ms;\r\n    -moz-transition: all 300ms;\r\n}\r\n.lolliclock-dial-out {\r\n    transform: scale(1.25, 1.25);\r\n    -webkit-transform: scale(1.25, 1.25);\r\n    -moz-transform: scale(1.25, 1.25);\r\n    opacity: 0;\r\n}\r\n.lolliclock-plate {\r\n    background: #f0f0f0;\r\n    border-radius: 100%;\r\n    -webkit-border-radius: 100%;\r\n    -moz-border-radius: 100%;\r\n    position: relative;\r\n    margin: auto;\r\n}\r\n.lolliclock-plate.animate {\r\n    transform: scale(0);\r\n    -webkit-transform: scale(0);\r\n    -moz-transform: scale(0);\r\n    animation: open-clock 150ms 150ms forwards;\r\n    -webkit-animation: open-clock 150ms 150ms forwards;\r\n    -moz-animation: open-clock 150ms 150ms forwards;\r\n}\r\n.lolliclock-plate.animate-out {\r\n    animation: open-clock 150ms forwards reverse cubic-bezier(0.4, 0, 0.2, 1);\r\n    -webkit-animation: open-clock 150ms forwards reverse cubic-bezier(0.4, 0, 0.2, 1);\r\n    -moz-animation: open-clock 150ms forwards reverse cubic-bezier(0.4, 0, 0.2, 1);\r\n}\r\n.lolliclock-canvas,\r\n.lolliclock-dial {\r\n    position: absolute;\r\n}\r\n.lolliclock-dial-minutes {\r\n    visibility: hidden;\r\n}\r\n.lolliclock-bearing {\r\n    fill: #000;\r\n    stroke-width: 1;\r\n}\r\n.lolliclock-canvas line {\r\n    stroke: #b3e5fc;\r\n    stroke-width: 1;\r\n    stroke-linecap: round;\r\n}\r\n.lolliclock-canvas-fg {\r\n    stroke: none;\r\n    fill: #0288d1;\r\n}\r\n.lolliclock-canvas-bg {\r\n    fill: rgba(3,169,244,0.25);\r\n}\r\n.lolliclock-tick {\r\n    border-radius: 100%;\r\n    -webkit-border-radius: 100%;\r\n    -moz-border-radius: 100%;\r\n    color: #666;\r\n    line-height: 24px;\r\n    text-align: center;\r\n    width: 24px;\r\n    height: 24px;\r\n    font-size: 0.55em;\r\n    font-weight: 600;\r\n    position: absolute;\r\n    cursor: pointer;\r\n}\r\n.lolliclock-tick.active,\r\n.lolliclock-tick:hover {\r\n    background: #b3e5fc;\r\n}\r\n.lolliclock-ampm-block {\r\n    display: flex;\r\n    justify-content: space-around;\r\n    margin-top: 20px;\r\n}\r\n.lolliclock-ampm-btn {\r\n    position: relative;\r\n    height: 35px;\r\n    width: 35px;\r\n    border-radius: 100%;\r\n    -webkit-border-radius: 100%;\r\n    -moz-border-radius: 100%;\r\n    font-size: 10px;\r\n    font-weight: 600;\r\n    cursor: pointer;\r\n}\r\n.lolliclock-ampm-btn.animate {\r\n    opacity: 0;\r\n    animation: open-btn 114ms 186ms forwards cubic-bezier(0.4, 0, 0.2, 1);\r\n    -webkit-animation: open-btn 114ms 186ms forwards cubic-bezier(0.4, 0, 0.2, 1);\r\n    -moz-animation: open-btn 114ms 186ms forwards cubic-bezier(0.4, 0, 0.2, 1);\r\n}\r\n.lolliclock-ampm-btn.animate-out {\r\n    animation: open-btn 150ms reverse forwards cubic-bezier(0.4, 0, 0.2, 1);\r\n    -webkit-animation: open-btn 150ms reverse forwards cubic-bezier(0.4, 0, 0.2, 1);\r\n    -moz-animation: open-btn 150ms reverse forwards cubic-bezier(0.4, 0, 0.2, 1);\r\n}\r\n.lolliclock-button.animate {\r\n    opacity: 0;\r\n    animation: open-btn 75ms 225ms forwards cubic-bezier(0.4, 0, 0.2, 1);\r\n    -webkit-animation: open-btn 75ms 225ms forwards cubic-bezier(0.4, 0, 0.2, 1);\r\n    -moz-animation: open-btn 75ms 225ms forwards cubic-bezier(0.4, 0, 0.2, 1);\r\n}\r\n.lolliclock-button.animate-out {\r\n    animation: open-btn 150ms reverse forwards cubic-bezier(0.4, 0, 0.2, 1);\r\n    -webkit-animation: open-btn 150ms reverse forwards cubic-bezier(0.4, 0, 0.2, 1);\r\n    -moz-animation: open-btn 150ms reverse forwards cubic-bezier(0.4, 0, 0.2, 1);\r\n}\r\n.lolliclock-btn-background {\r\n    position: absolute;\r\n    height: 35px;\r\n    width: 35px;\r\n    opacity: 0;\r\n    transform: scale(0);\r\n    -moz-transform: scale(0);\r\n    -webkit-transform: scale(0);\r\n}\r\n.lolliclock-btn-text {\r\n    position: absolute;\r\n    width: 100%;\r\n    text-align: center;\r\n    line-height: 35px;\r\n    vertical-align: middle;\r\n    color: #212121;\r\n}\r\n.lolliclock-active-button-background {\r\n    background-color: #03a9f4;\r\n    border-radius: 100%;\r\n    transition: transform 175ms;\r\n    -webkit-transition: transform 175ms;\r\n    -moz-transition: transform 175ms;\r\n    transform: scale(1);\r\n    -webkit-transform: scale(1);\r\n    -moz-transform: scale(1);\r\n    opacity: 1;\r\n}\r\n.lolliclock-active-button-text {\r\n    color: #fff;\r\n}\r\n.lolliclock-ampm-btn:focus {\r\n    outline: 0;\r\n}\r\n.lolliclock-clickable {\r\n    cursor: pointer;\r\n}\r\n.lolliclock-moving {\r\n    cursor: move;\r\n    cursor: -webkit-grabbing;\r\n    cursor: -moz-grabbing;\r\n}\r\n.lolliclock-export {\r\n    display: hidden;\r\n}\r\n.lolliclock-buttons {\r\n    font-size: 11px;\r\n    display: flex;\r\n    justify-content: flex-end;\r\n    margin-top: 50px;\r\n    margin-right: 8px;\r\n}\r\n.lolliclock-button {\r\n    font-weight: 500;\r\n    color: #03a9f4;\r\n    cursor: pointer;\r\n    padding: 8px;\r\n    min-width: 32px;\r\n    margin: 0 4px;\r\n    background: transparent;\r\n    text-align: center;\r\n    text-transform: uppercase;\r\n    border-radius: 2px;\r\n    -webkit-border-radius: 2px;\r\n    -moz-border-radius: 2px;\r\n}\r\n@-moz-keyframes open-popover {\r\n    0% {\r\n        max-height: 0;\r\n    }\r\n    100% {\r\n        max-height: 380px;\r\n    }\r\n}\r\n@-webkit-keyframes open-popover {\r\n    0% {\r\n        max-height: 0;\r\n    }\r\n    100% {\r\n        max-height: 380px;\r\n    }\r\n}\r\n@-o-keyframes open-popover {\r\n    0% {\r\n        max-height: 0;\r\n    }\r\n    100% {\r\n        max-height: 380px;\r\n    }\r\n}\r\n@keyframes open-popover {\r\n    0% {\r\n        max-height: 0;\r\n    }\r\n    100% {\r\n        max-height: 380px;\r\n    }\r\n}\r\n@-moz-keyframes slide-header {\r\n    0% {\r\n        height: 0;\r\n    }\r\n    100% {\r\n        height: 85px;\r\n    }\r\n}\r\n@-webkit-keyframes slide-header {\r\n    0% {\r\n        height: 0;\r\n    }\r\n    100% {\r\n        height: 85px;\r\n    }\r\n}\r\n@-o-keyframes slide-header {\r\n    0% {\r\n        height: 0;\r\n    }\r\n    100% {\r\n        height: 85px;\r\n    }\r\n}\r\n@keyframes slide-header {\r\n    0% {\r\n        height: 0;\r\n    }\r\n    100% {\r\n        height: 85px;\r\n    }\r\n}\r\n@-moz-keyframes transition-top-up {\r\n    0% {\r\n        margin-top: 0;\r\n        opacity: 1;\r\n    }\r\n    100% {\r\n        margin-top: -54px;\r\n        opacity: 0;\r\n    }\r\n}\r\n@-webkit-keyframes transition-top-up {\r\n    0% {\r\n        margin-top: 0;\r\n        opacity: 1;\r\n    }\r\n    100% {\r\n        margin-top: -54px;\r\n        opacity: 0;\r\n    }\r\n}\r\n@-o-keyframes transition-top-up {\r\n    0% {\r\n        margin-top: 0;\r\n        opacity: 1;\r\n    }\r\n    100% {\r\n        margin-top: -54px;\r\n        opacity: 0;\r\n    }\r\n}\r\n@keyframes transition-top-up {\r\n    0% {\r\n        margin-top: 0;\r\n        opacity: 1;\r\n    }\r\n    100% {\r\n        margin-top: -54px;\r\n        opacity: 0;\r\n    }\r\n}\r\n@-moz-keyframes transition-bottom-up {\r\n    0% {\r\n        opacity: 0;\r\n    }\r\n    100% {\r\n        opacity: 1;\r\n    }\r\n}\r\n@-webkit-keyframes transition-bottom-up {\r\n    0% {\r\n        opacity: 0;\r\n    }\r\n    100% {\r\n        opacity: 1;\r\n    }\r\n}\r\n@-o-keyframes transition-bottom-up {\r\n    0% {\r\n        opacity: 0;\r\n    }\r\n    100% {\r\n        opacity: 1;\r\n    }\r\n}\r\n@keyframes transition-bottom-up {\r\n    0% {\r\n        opacity: 0;\r\n    }\r\n    100% {\r\n        opacity: 1;\r\n    }\r\n}\r\n@-moz-keyframes open-clock {\r\n    0% {\r\n        transform: scale(0);\r\n        -webkit-transform: scale(0);\r\n        -moz-transform: scale(0);\r\n    }\r\n    100% {\r\n        transform: scale(1);\r\n        -webkit-transform: scale(1);\r\n        -moz-transform: scale(1);\r\n    }\r\n}\r\n@-webkit-keyframes open-clock {\r\n    0% {\r\n        transform: scale(0);\r\n        -webkit-transform: scale(0);\r\n        -moz-transform: scale(0);\r\n    }\r\n    100% {\r\n        transform: scale(1);\r\n        -webkit-transform: scale(1);\r\n        -moz-transform: scale(1);\r\n    }\r\n}\r\n@-o-keyframes open-clock {\r\n    0% {\r\n        transform: scale(0);\r\n        -webkit-transform: scale(0);\r\n        -moz-transform: scale(0);\r\n    }\r\n    100% {\r\n        transform: scale(1);\r\n        -webkit-transform: scale(1);\r\n        -moz-transform: scale(1);\r\n    }\r\n}\r\n@keyframes open-clock {\r\n    0% {\r\n        transform: scale(0);\r\n        -webkit-transform: scale(0);\r\n        -moz-transform: scale(0);\r\n    }\r\n    100% {\r\n        transform: scale(1);\r\n        -webkit-transform: scale(1);\r\n        -moz-transform: scale(1);\r\n    }\r\n}\r\n@-moz-keyframes open-btn {\r\n    0% {\r\n        transform: translate3d(0, -40px, 0);\r\n        -webkit-transform: translate3d(0, -40px, 0);\r\n        -moz-transform: translate3d(0, -40px, 0);\r\n        opacity: 0;\r\n    }\r\n    100% {\r\n        transform: translate3d(0, 0, 0);\r\n        -webkit-transform: translate3d(0, 0, 0);\r\n        -moz-transform: translate3d(0, 0, 0);\r\n        opacity: 1;\r\n    }\r\n}\r\n@-webkit-keyframes open-btn {\r\n    0% {\r\n        transform: translate3d(0, -40px, 0);\r\n        -webkit-transform: translate3d(0, -40px, 0);\r\n        -moz-transform: translate3d(0, -40px, 0);\r\n        opacity: 0;\r\n    }\r\n    100% {\r\n        transform: translate3d(0, 0, 0);\r\n        opacity: 1;\r\n    }\r\n}\r\n@-o-keyframes open-btn {\r\n    0% {\r\n        transform: translate3d(0, -40px, 0);\r\n        -webkit-transform: translate3d(0, -40px, 0);\r\n        -moz-transform: translate3d(0, -40px, 0);\r\n        opacity: 0;\r\n    }\r\n    100% {\r\n        transform: translate3d(0, 0, 0);\r\n        -webkit-transform: translate3d(0, 0, 0);\r\n        -moz-transform: translate3d(0, 0, 0);\r\n        opacity: 1;\r\n    }\r\n}\r\n@keyframes open-btn {\r\n    0% {\r\n        transform: translate3d(0, -40px, 0);\r\n        -webkit-transform: translate3d(0, -40px, 0);\r\n        -moz-transform: translate3d(0, -40px, 0);\r\n        opacity: 0;\r\n    }\r\n    100% {\r\n        transform: translate3d(0, 0, 0);\r\n        -webkit-transform: translate3d(0, 0, 0);\r\n        -moz-transform: translate3d(0, 0, 0);\r\n        opacity: 1;\r\n    }\r\n}\r\n\r\n.timepicker input {\r\n    position: relative;\r\n}\r\n\r\n/** Filled **/\r\n.input-field.filled input.disabled {\r\n    background: transparent;\r\n}\r\n\r\n/** Outlined **/\r\n.input-field.outlined.timepicker input:focus,\r\n.input-field.outlined.timepicker input.valid{\r\n    border: 2px solid #42a5f5;\r\n    box-shadow: none;\r\n}\r\n\r\n.input-field.outlined.timepicker input.field-error,\r\n.input-field.outlined.timepicker input.field-error:focus {\r\n    bo");
        builder.append("rder: 2px solid #f44336 !important;\r\n    box-shadow: none !important;\r\n    margin-bottom: 8px;\r\n}\r\n\r\n.input-field.outlined.timepicker input.field-success,\r\n.input-field.outlined.timepicker input.field-success:focus {\r\n    border: 2px solid #4caf50 !important;\r\n    box-shadow: none !important;\r\n    margin-bottom: 8px;\r\n}\r\n\r\n/** Focus  **/\r\n.input-field.timepicker input.valid {\r\n    border-bottom: 1px solid #42a5f5;\r\n    box-shadow: 0 1px 0 0 #42a5f5;\r\n}\r\n\r\n/** Mandatory Field **/\r\n.input-field.timepicker input.disabled + label.required:before {\r\n    display: none;\r\n}");
        return builder.toString();
      }
      public String getName() {
        return "timepickerCssDebug";
      }
    }
    ;
  }
  private static class timepickerCssDebugInitializer {
    static {
      _instance0.timepickerCssDebugInitializer();
    }
    static com.google.gwt.resources.client.TextResource get() {
      return timepickerCssDebug;
    }
  }
  public com.google.gwt.resources.client.TextResource timepickerCssDebug() {
    return timepickerCssDebugInitializer.get();
  }
  private void timepickerDarkCssDebugInitializer() {
    timepickerDarkCssDebug = new com.google.gwt.resources.client.TextResource() {
      // jar:file:/Users/jmxpsx/.m2/repository/com/github/gwtmaterialdesign/gwt-material-addins/2.4.0/gwt-material-addins-2.4.0.jar!/gwt/material/design/addins/client/timepicker/resources/css/timepicker-dark.css
      public String getText() {
        return ".lolliclock-header {\r\n    background-color: #1e1f22 !important\r\n}\r\n\r\n.lolliclock-popover {\r\n    background-color: #2e3033\r\n}\r\n\r\n.lolliclock-plate {\r\n    background-color: #282828\r\n}\r\n\r\n.lolliclock-active-button-background {\r\n    background: #bb86fc !important\r\n}\r\n\r\n.lolliclock-btn-text {\r\n    color: #d2d2d2\r\n}\r\n\r\n.lolliclock-active-button-text {\r\n    color: #000\r\n}\r\n\r\n.lolliclock-button {\r\n    color: #bb86fc !important\r\n}\r\n\r\n.lolliclock-canvas-bg {\r\n    fill: #d6b5ff !important\r\n}\r\n\r\n.lolliclock-canvas-fg {\r\n    fill: #bb86fc !important\r\n}\r\n\r\n.lolliclock-canvas line {\r\n    stroke: #fff !important\r\n}\r\n\r\n.lolliclock-tick.active, .lolliclock-tick:hover {\r\n    background-color: #bb86fc !important\r\n}\r\n\r\n.input-field.timepicker input.valid {\r\n    border-bottom: 1px solid #bb86fc;\r\n    box-shadow: 0 1px 0 0 #bb86fc;\r\n}";
      }
      public String getName() {
        return "timepickerDarkCssDebug";
      }
    }
    ;
  }
  private static class timepickerDarkCssDebugInitializer {
    static {
      _instance0.timepickerDarkCssDebugInitializer();
    }
    static com.google.gwt.resources.client.TextResource get() {
      return timepickerDarkCssDebug;
    }
  }
  public com.google.gwt.resources.client.TextResource timepickerDarkCssDebug() {
    return timepickerDarkCssDebugInitializer.get();
  }
  private void timepickerJsDebugInitializer() {
    timepickerJsDebug = new com.google.gwt.resources.client.TextResource() {
      // jar:file:/Users/jmxpsx/.m2/repository/com/github/gwtmaterialdesign/gwt-material-addins/2.4.0/gwt-material-addins-2.4.0.jar!/gwt/material/design/addins/client/timepicker/resources/js/timepicker.js
      public String getText() {
        StringBuilder builder = new StringBuilder();
        builder.append("/*!\r\n * Lolliclock v0.1.0\r\n * Matthew Krick 2015\r\n * Inspired by Google's material design & ClockPicker v0.0.7 (http://weareoutman.github.io/clockpicker/)\r\n */\r\n\r\n;\r\n(function () {\r\n    var $ = window.jQuery;\r\n\r\n    // Default options\r\n    LolliClock.DEFAULTS = {\r\n        startTime: '',	      // default time, '' or 'now' or 'H:MM AM'\r\n        autoclose: false,    	// show Cancel/OK buttons\r\n        vibrate: true,        // vibrate the device when dragging clock hand\r\n        hour24:false,\r\n        orientation:\"portrait\",\r\n        cancelText: \"CANCEL\",\r\n        okText: \"OK\"\r\n    };\r\n\r\n    // Listen touch events in touch screen device, instead of mouse events in desktop.\r\n    var touchSupported = 'ontouchstart' in window;\r\n    var mousedownEvent = 'mousedown' + ( touchSupported ? ' touchstart' : '');\r\n    var mousemoveEvent = 'mousemove.lolliclock' + ( touchSupported ? ' touchmove.lolliclock' : '');\r\n    var mouseupEvent = 'mouseup.lolliclock' + ( touchSupported ? ' touchend.lolliclock' : '');\r\n\r\n    // Vibrate the device if supported\r\n    var vibrate = navigator.vibravarte ? 'vibrate' : navigator.webkitVibrate ? 'webkitVibrate' : null;\r\n\r\n    var svgNS = 'http://www.w3.org/2000/svg';\r\n\r\n    function createSvgElement(name) {\r\n        return document.createElementNS(svgNS, name);\r\n    }\r\n\r\n    function leadingZero(num) {\r\n        return (num < 10 ? '0' : '') + num;\r\n    }\r\n\r\n    // Get a unique id\r\n    var idCounter = 0;\r\n\r\n    function uniqueId(prefix) {\r\n        var id = ++idCounter + '';\r\n        return prefix ? prefix + id : id;\r\n    }\r\n\r\n    // Clock size\r\n    var dialRadius = 84;\r\n    var radius = 50;\r\n    var outSizeRadius = 70;\r\n    var tickRadius = 12;\r\n    var diameter = dialRadius * 2;\r\n    var duration = 350;\r\n\r\n    // Popover template\r\n    var tpl = [\r\n        '<div id=\"time-picker\" class=\"clock-overlay\">',\r\n        '<div class=\"lolliclock-popover\">',\r\n        '<div class=\"lolliclock-header\">',\r\n        '<div class=\"lolliclock-time\">',\r\n        '<div class=\"lolliclock-hours lolliclock-primary-text\">',\r\n        '<div class=\"lolliclock-time-old\"></div>',\r\n        '<div class=\"lolliclock-time-new\"></div>',\r\n        '</div>',\r\n        '<span class=\"lolliclock-colon\">:</span>',\r\n        '<div class=\"lolliclock-minutes\">',\r\n        '<div class=\"lolliclock-time-old\"></div>',\r\n        '<div class=\"lolliclock-time-new\"></div>',\r\n        '</div>',\r\n        '</div>',\r\n        '<span class=\"lolliclock-am-pm\"></span>',\r\n        '</div>',\r\n        '<div class=\"popover-content\">',\r\n        '<div class=\"lolliclock-plate\">',\r\n        '<div class=\"lolliclock-canvas\"></div>',\r\n        '<div class=\"lolliclock-dial lolliclock-dial-hours\"></div>',\r\n        '<div class=\"lolliclock-dial lolliclock-dial-minutes lolliclock-dial-out\"></div>',\r\n        '</div>',\r\n        '<div class=\"lolliclock-ampm-block\">',\r\n        '<div id=\"lolliclock-btn-am\" class=\"lolliclock-ampm-btn\">',\r\n        '<div class=\"lolliclock-btn-background\"></div>',\r\n        '<div class=\"lolliclock-btn-text\">AM</div>',\r\n        '</div>',\r\n        '<div style=\"flex: 1;\"></div>',\r\n        '<div id=\"lolliclock-btn-pm\" class=\"lolliclock-ampm-btn\">',\r\n        '<div class=\"lolliclock-btn-background\"></div>',\r\n        '<div class=\"lolliclock-btn-text\">PM</div>',\r\n        '</div>',\r\n        '</div>',\r\n        '</div>',\r\n        '</div>',\r\n        '</div>'\r\n    ].join('');\r\n\r\n    // LolliClock\r\n    function LolliClock(element, options) {\r\n        var popover = $(tpl);\r\n        var main = popover.find('.lolliclock-popover');\r\n        var plate = popover.find('.lolliclock-plate');\r\n        var hoursView = popover.find('.lolliclock-dial-hours');\r\n        var minutesView = popover.find('.lolliclock-dial-minutes');\r\n        var isInput = element.prop('tagName') === 'INPUT';\r\n        var input = isInput ? element : element.find('input');\r\n        var self = this;\r\n\r\n        this.id = uniqueId('lolli');\r\n        this.element = element;\r\n        this.options = options;\r\n        this.isAppended = false;\r\n        this.isShown = false;\r\n        this.currentView = 'hours';\r\n        this.isInput = isInput;\r\n        this.input = input;\r\n        this.popover = popover;\r\n        this.plate = plate;\r\n        this.hoursView = hoursView;\r\n        this.minutesView = minutesView;\r\n        this.header = popover.find('.lolliclock-header');\r\n        this.spanHours = popover.find('.lolliclock-hours');\r\n        this.spanMinutes = popover.find('.lolliclock-minutes');\r\n        this.spanNewTime = popover.find('.lolliclock-time-new');\r\n        this.spanOldTime = popover.find('.lolliclock-time-old');\r\n        this.spanAmPm = popover.find('.lolliclock-am-pm');\r\n        this.amOrPm = \"PM\";\r\n        this.AmPmButtons = popover.find('.lolliclock-ampm-btn');\r\n        this.amButton = popover.find('#lolliclock-btn-am');\r\n        this.pmButton = popover.find('#lolliclock-btn-pm');\r\n        if(this.options.hour24) {\r\n            this.AmPmButtons.hide();\r\n            this.spanAmPm.hide();\r\n        }\r\n        popover.addClass(this.options.orientation);\r\n\r\n        //var exportName = (this.input[0].name || this.input[0].id) + '-export';\r\n        //this.dateTimeVal = $('<input type=\"hidden\" id=\"' + exportName + '\"></input>').insertAfter(input);\r\n        // If autoclose is not setted, append a button\r\n        if (!options.autoclose) {\r\n            this.popover.css('height', '380px');\r\n            var $closeButtons = $('<div class=\"lolliclock-buttons\"></div>').appendTo(main);\r\n            $('<div class=\"lolliclock-button\">' + options.cancelText + '</div>')\r\n                .click($.proxy(this.hide, this))\r\n                .appendTo($closeButtons);\r\n            $('<div class=\"lolliclock-button\">' + options.okText + '</div>')\r\n                .click($.proxy(this.done, this))\r\n                .appendTo($closeButtons);\r\n            this.closeButtons = popover.find('.lolliclock-button');\r\n        }\r\n\r\n        // Show or toggle\r\n        input.on('focus.lolliclock click.lolliclock', $.proxy(this.show, this));\r\n\r\n        // Build ticks\r\n        var tickTpl = $('<div class=\"lolliclock-tick\"></div>');\r\n        var i, tick, radian;\r\n\r\n        // Hours view\r\n        if(options.hour24) {\r\n            for (i = 1; i < 13; i++) {\r\n                tick = tickTpl.clone();\r\n                radian = i / 6 * Math.PI;\r\n                tick.css({\r\n                    left: dialRadius + Math.sin(radian) * radius - tickRadius,\r\n                    top: dialRadius - Math.cos(radian) * radius - tickRadius\r\n                });\r\n                tick.html(i);\r\n                hoursView.append(tick);\r\n            }\r\n\r\n            for (i = 13; i <= 24; i++) {\r\n                tick = tickTpl.clone();\r\n                radian = (i / 6) * Math.PI;\r\n                tick.css({\r\n                    left: dialRadius + Math.sin(radian) * outSizeRadius - tickRadius,\r\n                    top: dialRadius - Math.cos(radian) * outSizeRadius - tickRadius\r\n                });\r\n                if(i === 24) {\r\n                    tick.html(\"00\");\r\n                } else {\r\n                    tick.html(i);\r\n                }\r\n                hoursView.append(tick);\r\n            }\r\n        } else {\r\n            for (i = 1; i < 13; i++) {\r\n                tick = tickTpl.clone();\r\n                radian = i / 6 * Math.PI;\r\n                tick.css({\r\n                    left: dialRadius + Math.sin(radian) * outSizeRadius - tickRadius,\r\n                    top: dialRadius - Math.cos(radian) * outSizeRadius - tickRadius\r\n                });\r\n                tick.html(i);\r\n                hoursView.append(tick);\r\n            }\r\n        }\r\n        // Minutes view\r\n        for (i = 0; i < 60; i += 5) {\r\n            tick = tickTpl.clone();\r\n            radian = i / 30 * Math.PI;\r\n            tick.css({\r\n                left: dialRadius + Math.sin(radian) * outSizeRadius - tickRadius,\r\n                top: dialRadius - Math.cos(radian) * outSizeRadius - tickRadius\r\n            });\r\n            tick.html(leadingZero(i));\r\n            minutesView.append(tick);\r\n        }\r\n\r\n        //Move click to nearest tick\r\n        plate.on(mousedownEvent, mousedown);\r\n\r\n        // Mousedown or touchstart\r\n        function mousedown(e) {\r\n            var offset = plate.offset(),\r\n                isTouch = /^touch/.test(e.type),\r\n                x0 = offset.left + dialRadius,\r\n                y0 = offset.top + dialRadius,\r\n                dx = (isTouch ? e.originalEvent.touches[0] : e).pageX - x0,\r\n                dy = (isTouch ? e.originalEvent.touches[0] : e).pageY - y0,\r\n                z = Math.sqrt(dx * dx + dy * dy),\r\n                moved = false;\r\n            outsideMode = true;\r\n\r\n            // Ignore plate clicks that aren't even close\r\n            if (z< outSizeRadius + tickRadius && z> outSizeRadius - tickRadius) {\r\n                outsideMode = true\r\n            } else if (z > radius - tickRadius && z < radius + tickRadius && options.hour24 &&  self.currentView === 'hours') {\r\n                outsideMode = false\r\n            } else {\r\n                return\r\n            }\r\n            e.preventDefault();\r\n            $(document.body).addClass('lolliclock-moving');\r\n\r\n            // Place the canvas to top\r\n            plate.append(self.canvas);\r\n\r\n            // Clock\r\n            self.setHand(dx, dy, outsideMode);\r\n\r\n            // Mousemove on document\r\n            $(document).off(mousemoveEvent).on(mousemoveEvent, function (e) {\r\n                e.preventDefault();\r\n                var isTouch = /^touch/.test(e.type),\r\n                    x = (isTouch ? e.originalEvent.touches[0] : e).pageX - x0,\r\n                    y = (isTouch ? e.originalEvent.touches[0] : e).pageY - y0;\r\n                if (!moved && x === dx && y === dy) {\r\n                    // Clicking in chrome on windows will trigger a mousemove event\r\n                    return;\r\n                }\r\n                moved = true;\r\n                self.setHand(x, y, outsideMode);\r\n            });\r\n\r\n            // Mouseup on document\r\n            $(document).off(mouseupEvent).on(mouseupEvent, function (e) {\r\n                e.preventDefault();\r\n                var isTouch = /^touch/.test(e.type),\r\n                    x = (isTouch ? e.originalEvent.changedTouches[0] : e).pageX - x0,\r\n                    y = (isTouch ? e.originalEvent.changedTouches[0] : e).pageY - y0;\r\n                if (x === dx && y === dy) {\r\n                    self.setHand(x, y, outsideMode);\r\n                }\r\n                if (self.currentView === 'hours') {\r\n                    self.toggleView('minutes', duration / 2);\r\n                } else if (options.autoclose) {\r\n                    self.done();\r\n                }\r\n                plate.prepend(canvas);\r\n\r\n                // Reset mouse cursor\r\n                $(document.body).removeClass('lolliclock-moving');\r\n\r\n                // Unbind mousemove event\r\n                $(document).off(mousemoveEvent);\r\n                $(document).off(mouseupEvent);\r\n            });\r\n        }\r\n\r\n        // Draw clock SVG\r\n        var canvas = popover.find('.lolliclock-canvas');\r\n        var svg = createSvgElement('svg');\r\n        svg.setAttribute('class', 'lolliclock-svg');\r\n        svg.setAttribute('width', diameter);\r\n        svg.setAttribute('height', diameter);\r\n        var g = createSvgElement('g');\r\n        g.setAttribute('transform', 'translate(' + dialRadius + ',' + dialRadius + ')');\r\n        var bearing = createSvgElement('circle');\r\n        bearing.setAttribute('class', 'lolliclock-bearing');\r\n        bearing.setAttribute('cx', 0);\r\n        bearing.setAttribute('cy', 0);\r\n        bearing.setAttribute('r', 1.25);\r\n        var hand = createSvgElement('line');\r\n        hand.setAttribute('x1', 0);\r\n        hand.setAttribute('y1', 0);\r\n        var bg = createSvgElement('circle');\r\n        bg.setAttribute('class', 'lolliclock-canvas-bg');\r\n        bg.setAttribute('r', tickRadius);\r\n        var fg = createSvgElement('circle');\r\n        fg.setAttribute('class', 'lolliclock-canvas-fg');\r\n        fg.setAttribute('r', 3.5);\r\n        g.appendChild(hand);\r\n        g.appendChild(bg);\r\n        g.appendChild(fg);\r\n        g.appendChild(bearing);\r\n\r\n        svg.appendChild(g);\r\n        canvas.append(svg);\r\n\r\n        this.hand = hand;\r\n        this.bg = bg;\r\n        this.fg = fg;\r\n        this.bearing = bearing;\r\n        this.g = g;\r\n        this.canvas = canvas;\r\n\r\n\r\n        // Chrome 73 suggested solution for Timepicker being fubared when opening.\r\n        // Refer to https://github.com/GwtMaterialDesign/gwt-material/commit/0670c85ce2a1ee2c28be906fb12f4c0435321ce6\r\n        document.querySelector(\"#\" + $(input).attr(\"id\")).addEventListener('pointerdown', function(event) {\r\n            if (event.target && event.target.setPointerCapture) {\r\n                event.target.setPointerCapture(event.pointerId)\r\n            }\r\n        });\r\n\r\n        raiseCallback(this.options.init);\r\n    }\r\n\r\n    function raiseCallback(callbackFunction) {\r\n        if (callbackFunction && typeof callbackFunction === \"function\") {\r\n            callbackFunction();\r\n        }\r\n    }\r\n\r\n    // Show or hide popover\r\n    LolliClock.prototype.toggle = function () {\r\n        this[this.isShown ? 'hide' : 'show']();\r\n    };\r\n\r\n    // Show or hide popover\r\n    LolliClock.prototype.setOrientation = function (orientation) {\r\n        this.popover.removeClass(this.options.orientation);\r\n        this.options.orientation = orientation;\r\n        this.popover.addClass(orientation);\r\n    };\r\n\r\n    LolliClock.prototype.changeAmPm = function (isAmOrPm) {\r\n        if (!!isAmOrPm && isAmOrPm === this.amOrPm && this.options.hour24) return;\r\n        this.amOrPm = this.amOrPm === 'AM' ? 'PM' : 'AM';\r\n        this.spanAmPm.html(this.amOrPm);\r\n        $(this.amButton[0].childNodes[0]).toggleClass('lolliclock-active-button-background', (this.amOrPm === 'AM'));\r\n        $(this.pmButton[0].childNodes[0]).toggleClass('lolliclock-active-button-background', (this.amOrPm === 'PM'));\r\n        $(this.amButton[0].childNodes[1]).toggleClass('lolliclock-active-button-text', (this.amOrPm === 'AM'));\r\n        $(this.pmButton[0].childNodes[1]).toggleClass('lolliclock-active-button-text', (this.amOrPm === 'PM'));\r\n    };\r\n\r\n    // Set popover position, keep it on screen no matter how it's scrolled\r\n    LolliClock.prototype.locate = function () {\r\n        var element = this.element;\r\n        var popover = this.popover;\r\n        var popoverMargin = 8;\r\n        var leftOffset = element.offset().left + (element.outerWidth() - popover.width()) / 2;\r\n        var maxLeft = $(window).width() - popover.width() - popoverMargin;\r\n        var minLeft = popoverMargin;\r\n        var maxTop = $(window).height() + $(window).scrollTop() - popoverMargin - popover.height();\r\n        var minTop = popoverMargin + $(window).scrollTop();\r\n        var topOffset = element.offset().top;\r\n        var styles = {};\r\n\r\n        styles.top = topOffset < minTop ? minTop : topOffset > maxTop ? maxTop : topOffset;\r\n        styles.left = leftOffset < minLeft ? minLeft : leftOffset > maxLeft ? maxLeft : leftOffset;\r\n        popover.css(styles);\r\n        popover.show();\r\n    };\r\n\r\n    // Show popover\r\n    LolliClock.prototype.show = function () {\r\n        //this.input.trigger('blur');\r\n        if (this.isShown) {\r\n            return;\r\n        }\r\n\r\n        raiseCallback(this.options.beforeShow);\r\n        var self = this;\r\n\r\n        this.popover.addClass(this.options.orientation);\r\n\r\n        // Initialize\r\n        if (!this.isAppended) {\r\n            // Append popover to body\r\n            $(document.body).append(this.popover);\r\n            this.isAppended = true;\r\n\r\n            // Reset position when resize\r\n            $(window).on('resize.lolliclock' + this.id, function () {\r\n                if (self.isShown) {\r\n                    self.locate();\r\n                }\r\n            });\r\n\r\n            // Reset position on scroll\r\n            $(window).on('scroll.lolliclock', function () {\r\n                if (self.isShown) {\r\n                    self.locate();\r\n                }\r\n            });\r\n\r\n            //Add listeners\r\n            this.AmPmButtons.on('click', function (e) {\r\n                self.changeAmPm(e.currentTarget.children[1].innerHTML);\r\n            });\r\n            this.spanMinutes.on('click', function () {\r\n                self.toggleView('minutes');\r\n    ");
        builder.append("        });\r\n            this.spanHours.on('click', function () {\r\n                self.toggleView('hours');\r\n            });\r\n            this.spanAmPm.on('click', function () {\r\n                self.changeAmPm();\r\n            });\r\n        }\r\n\r\n        // Set position\r\n        self.locate();\r\n\r\n        //animate show\r\n        this.plate.addClass('animate');\r\n        this.header.addClass('animate');\r\n        this.popover.addClass('animate');\r\n        this.AmPmButtons.addClass('animate');\r\n        this.spanNewTime.addClass('animate');\r\n        this.spanOldTime.addClass('animate');\r\n        !this.options.autoclose && this.closeButtons.addClass('animate');\r\n\r\n        this.plate.on('webkitAnimationEnd animationend MSAnimationEnd oanimationend', function () {\r\n            self.plate.removeClass(\"animate\");\r\n            self.header.removeClass(\"animate\");\r\n            self.popover.removeClass(\"animate\");\r\n            self.AmPmButtons.removeClass(\"animate\");\r\n            self.spanNewTime.removeClass(\"animate\");\r\n            self.spanOldTime.removeClass(\"animate\");\r\n            !self.options.autoclose && self.closeButtons.removeClass(\"animate\");\r\n            self.plate.off('webkitAnimationEnd animationend MSAnimationEnd oanimationend');\r\n        });\r\n\r\n        //Get the time\r\n        function timeToDate(time) {\r\n            var parts = time.split(':');\r\n            if (parts.length === 2){\r\n                var hours = +parts[0];\r\n                var minAM = parts[1].split(' ');\r\n                if (minAM.length === 2) {\r\n                    var mins = minAM[0];\r\n                    if (minAM[1] === 'PM') hours += 12;\r\n                    return new Date(1970, 1, 1, hours, mins);\r\n                }\r\n            }\r\n            return new Date('x');\r\n        }\r\n\r\n        function isValidTime(time) {\r\n            return !isNaN(timeToDate(time).getTime());\r\n        }\r\n\r\n        var value;\r\n        var inputValue = this.input.prop('value');\r\n        var defaultValue = this.options.startTime;\r\n        var placeholderValue = this.input.prop('placeholder');\r\n\r\n        if (inputValue && isValidTime(inputValue)) {\r\n            value = timeToDate(inputValue);\r\n        } else if (defaultValue === 'now') {\r\n            value = new Date();\r\n        } else if (defaultValue && isValidTime(defaultValue)) {\r\n            value = timeToDate(defaultValue);\r\n        } else if (placeholderValue && isValidTime(placeholderValue)) {\r\n            value = timeToDate(placeholderValue);\r\n        } else {\r\n            value = new Date();\r\n        }\r\n        if(this.options.hour24) {\r\n            this.hours = value.getHours()\r\n        } else {\r\n            this.hours = value.getHours()%12;\r\n            this.amOrPm = value.getHours() > 11 ? \"AM\" : \"PM\";\r\n        }\r\n        this.minutes = value.getMinutes();\r\n        //purposefully wrong because we change it next line\r\n\r\n        this.changeAmPm();\r\n\r\n        // Set time\r\n        self.toggleView('minutes');\r\n        self.toggleView('hours');\r\n\r\n        self.isShown = true;\r\n\r\n        // Hide when clicking or tabbing on any element except the clock, input\r\n        $(document).on('click.lolliclock.' + this.id + ' focusin.lolliclock.' + this.id, function (e) {\r\n            var target = $(e.target);\r\n            if (target.closest(self.popover).length === 0 &&\r\n                target.closest(self.input).length === 0) {\r\n                self.done();\r\n            }\r\n        });\r\n\r\n        // Hide when ESC is pressed\r\n        $(document).on('keyup.lolliclock.' + this.id, function (e) {\r\n            if (e.keyCode === 27) {\r\n                self.hide();\r\n            }\r\n        });\r\n        raiseCallback(this.options.afterShow);\r\n    };\r\n\r\n    // Hide popover\r\n    LolliClock.prototype.hide = function () {\r\n        raiseCallback(this.options.beforeHide);\r\n\r\n        //animate out\r\n        var self = this;\r\n        self.popover.addClass('animate-out');\r\n        self.plate.addClass(\"animate-out\");\r\n        self.header.addClass(\"animate-out\");\r\n        self.AmPmButtons.addClass(\"animate-out\");\r\n        !self.options.autoclose && self.closeButtons.addClass('animate-out');\r\n\r\n        this.popover.on('webkitAnimationEnd animationend MSAnimationEnd oanimationend',\r\n            function () {\r\n                $(self.spanHours[0].childNodes[0]).html('');\r\n                $(self.spanMinutes[0].childNodes[0]).html('');\r\n                self.popover.removeClass(\"animate-out\");\r\n                self.plate.removeClass(\"animate-out\");\r\n                self.header.removeClass(\"animate-out\");\r\n                self.AmPmButtons.removeClass(\"animate-out\");\r\n                !self.options.autoclose && self.closeButtons.removeClass(\"animate-out\");\r\n                self.popover.off('webkitAnimationEnd animationend MSAnimationEnd oanimationend');\r\n\r\n                // Unbinding events on document\r\n                $(document).off('click.lolliclock.' + self.id + ' focusin.lolliclock.' + self.id);\r\n                $(document).off('keyup.lolliclock.' + self.id);\r\n\r\n                self.popover.hide();\r\n                raiseCallback(self.options.afterHide);\r\n            }\r\n        );\r\n\r\n        self.isShown = false;\r\n    };\r\n\r\n    // Toggle to hours or minutes view\r\n    LolliClock.prototype.toggleView = function (view, delay) {\r\n        var isHours = view === 'hours';\r\n        var nextView = isHours ? this.hoursView : this.minutesView;\r\n        var hideView = isHours ? this.minutesView : this.hoursView;\r\n\r\n        this.currentView = view;\r\n\r\n        this.spanHours.toggleClass('lolliclock-primary-text', isHours);\r\n        this.spanMinutes.toggleClass('lolliclock-primary-text', !isHours);\r\n\r\n        // Let's make transitions\r\n        hideView.addClass('lolliclock-dial-out');\r\n        nextView.css('visibility', 'visible').removeClass('lolliclock-dial-out');\r\n\r\n        // Reset clock hand\r\n        this.resetClock(delay);\r\n\r\n        // After transitions ended\r\n        clearTimeout(this.toggleViewTimer);\r\n        this.toggleViewTimer = setTimeout(function () {\r\n            hideView.css('visibility', 'hidden');\r\n        }, duration);\r\n\r\n        //Add pointer mouse cursor to show you can click between ticks\r\n        if (isHours) {\r\n            this.plate.off(mousemoveEvent);\r\n        } else {\r\n            var self = this;\r\n            this.plate.on(mousemoveEvent, function (e) {\r\n                var offset = self.plate.offset(),\r\n                    x0 = offset.left + dialRadius,\r\n                    y0 = offset.top + dialRadius,\r\n                    dx = e.pageX - x0,\r\n                    dy = e.pageY - y0,\r\n                    z = Math.sqrt(dx * dx + dy * dy);\r\n\r\n                if (z > outSizeRadius - tickRadius && z < outSizeRadius + tickRadius) {\r\n                    $(document.body).addClass('lolliclock-clickable');\r\n                } else {\r\n                    $(document.body).removeClass('lolliclock-clickable');\r\n                }\r\n            });\r\n        }\r\n    };\r\n\r\n    // Reset clock hand\r\n    LolliClock.prototype.resetClock = function (delay) {\r\n        var view = this.currentView,\r\n            outSizeMode = true,\r\n            value = this[view],\r\n            isHours = view === 'hours';\r\n        if(isHours) {\r\n            unit = Math.PI /  6;\r\n            if(value !== 0 && value <=12 && this.options.hour24) {\r\n                outSizeMode = false;\r\n            }\r\n        } else {\r\n            unit = Math.PI / 30\r\n        }\r\n\r\n        var radian = value * unit,\r\n            x = Math.sin(radian) * radius,\r\n            y = -Math.cos(radian) * radius,\r\n            self = this;\r\n        if (delay) {\r\n            self.canvas.addClass('lolliclock-canvas-out');\r\n            setTimeout(function () {\r\n                self.canvas.removeClass('lolliclock-canvas-out');\r\n                self.setHand(x, y, outSizeMode);\r\n            }, delay);\r\n        } else {\r\n            this.setHand(x, y, outSizeMode);\r\n        }\r\n    };\r\n\r\n    // Set clock hand to (x, y)\r\n    LolliClock.prototype.setHand = function (x, y, outSizeMode) {\r\n        //Keep radians postive from 1 to 2pi\r\n        var radian = Math.atan2(-x, y) + Math.PI;\r\n        var isHours = this.currentView === 'hours';\r\n        var unit = Math.PI / (isHours ? 6 : 30);\r\n        var value;\r\n\r\n        // Get the round value\r\n        if(outSizeMode && this.options.hour24 && isHours) {\r\n            value = Math.round(radian / unit);\r\n            if(value === 12 || value ===0) {\r\n                value = 0;\r\n            } else {\r\n                value += 12;\r\n            }\r\n        } else {\r\n            value = Math.round(radian / unit);\r\n        }\r\n\r\n        // Get the round radian\r\n        radian = value * unit;\r\n\r\n        // Correct the hours or minutes\r\n        if (isHours) {\r\n            if (value === 0 && !(this.options.hour24 && outSizeMode)) {\r\n                value = 12;\r\n            }\r\n            this.fg.style.visibility = 'hidden';\r\n        } else {\r\n            var isOnNum = (value % 5 === 0);\r\n            if (isOnNum) {\r\n                this.fg.style.visibility = 'hidden';\r\n            } else {\r\n                this.fg.style.visibility = 'visible';\r\n            }\r\n            if (value === 60) {\r\n                value = 0;\r\n            }\r\n        }\r\n\r\n        // Once hours or minutes changed, vibrate the device\r\n        if (this[this.currentView] !== value) {\r\n            if (vibrate && this.options.vibrate) {\r\n                // Do not vibrate too frequently\r\n                if (!this.vibrateTimer) {\r\n                    navigator[vibrate](10);\r\n                    this.vibrateTimer = setTimeout($.proxy(function () {\r\n                        this.vibrateTimer = null;\r\n                    }, this), 100);\r\n                }\r\n            }\r\n        }\r\n\r\n        //TODO: Keep tens digit static for changing hours\r\n        this[this.currentView] = value;\r\n        function cleanupAnimation($obj) {\r\n            $obj.on('webkitAnimationEnd animationend MSAnimationEnd oanimationend', function () {\r\n                $oldTime.html(value); //only needed for -up transitions\r\n                $oldTime.removeClass(\"old-down old-up\");\r\n                $newTime.removeClass(\"new-down new-up\");\r\n                $oldTime.off('webkitAnimationEnd animationend MSAnimationEnd oanimationend');\r\n            });\r\n        }\r\n\r\n        var $oldTime;\r\n        var $newTime;\r\n        if (isHours) {\r\n            $oldTime = $(this.spanHours[0].childNodes[0]);\r\n            $newTime = $(this.spanHours[0].childNodes[1]);\r\n            if(this.options.hour24) {\r\n                value = leadingZero(value);\r\n            }\r\n        } else {\r\n            $oldTime = $(this.spanMinutes[0].childNodes[0]);\r\n            $newTime = $(this.spanMinutes[0].childNodes[1]);\r\n            value = leadingZero(value);\r\n        }\r\n        cleanupAnimation($oldTime);\r\n        if (value < (+$oldTime.html())) {\r\n            $newTime.html($oldTime.html());\r\n            $oldTime.html(value);\r\n            $newTime.addClass('new-down');\r\n            $oldTime.addClass('old-down');\r\n        } else if (value > (+$oldTime.html()) || !$oldTime.html()) {\r\n            $newTime.html(value);\r\n            $oldTime.addClass('old-up');\r\n            $newTime.addClass('new-up');\r\n        }\r\n\r\n        this.g.insertBefore(this.hand, this.bearing);\r\n        this.g.insertBefore(this.bg, this.fg);\r\n        this.bg.setAttribute('class', 'lolliclock-canvas-bg');\r\n\r\n        // Set clock hand and others' position\r\n\r\n        var r = radius;\r\n        if (outSizeMode) {\r\n            r = outSizeRadius\r\n        }\r\n        var cx = Math.sin(radian) * r,\r\n            cy = -Math.cos(radian) * r;\r\n        this.hand.setAttribute('x2', Math.sin(radian) * (r - tickRadius));\r\n        this.hand.setAttribute('y2', -Math.cos(radian) * (r - tickRadius));\r\n\r\n        this.bg.setAttribute('cx', cx);\r\n        this.bg.setAttribute('cy', cy);\r\n        this.fg.setAttribute('cx', cx);\r\n        this.fg.setAttribute('cy', cy);\r\n    };\r\n\r\n    // Hours and minutes are selected\r\n    LolliClock.prototype.done = function () {\r\n        raiseCallback(this.options.beforeDone);\r\n\r\n        var last = this.input.prop('value');\r\n        var value = \"\";\r\n        if(!this.options.hour24) {\r\n            value = this.hours + ':' + leadingZero(this.minutes) + \" \" + this.amOrPm;\r\n        } else {\r\n            value = leadingZero(this.hours) + ':' + leadingZero(this.minutes) ;\r\n        }\r\n        if (value !== last) {\r\n            this.input.prop('value', value);\r\n            this.input.trigger('input');\r\n            this.input.trigger('change');\r\n        }\r\n        this.hide();\r\n    };\r\n\r\n    // Remove lolliclock from input\r\n    LolliClock.prototype.remove = function () {\r\n        this.element.removeData('lolliclock');\r\n        this.input.off('focus.lolliclock click.lolliclock');\r\n        if (this.isShown) {\r\n            this.hide();\r\n        }\r\n        if (this.isAppended) {\r\n            $(window).off('resize.lolliclock' + this.id);\r\n            $(window).off('scroll.lolliclock' + this.id);\r\n            this.popover.remove();\r\n        }\r\n    };\r\n    // Extends $.fn.lolliclock\r\n    $.fn.lolliclock = function (option) {\r\n        var args = Array.prototype.slice.call(arguments, 1);\r\n        return this.each(function () {\r\n            var $this = $(this),\r\n                data = $this.data('lolliclock');\r\n            if (!data) {\r\n                var options = $.extend({}, LolliClock.DEFAULTS, $this.data(), typeof option == 'object' && option);\r\n                $this.data('lolliclock', new LolliClock($this, options));\r\n            } else {\r\n                // Manual operatsions. show, hide, remove, e.g.\r\n                if (typeof data[option] === 'function') {\r\n                    data[option].apply(data, args);\r\n                }\r\n            }\r\n        });\r\n    };\r\n}());\r\n");
        return builder.toString();
      }
      public String getName() {
        return "timepickerJsDebug";
      }
    }
    ;
  }
  private static class timepickerJsDebugInitializer {
    static {
      _instance0.timepickerJsDebugInitializer();
    }
    static com.google.gwt.resources.client.TextResource get() {
      return timepickerJsDebug;
    }
  }
  public com.google.gwt.resources.client.TextResource timepickerJsDebug() {
    return timepickerJsDebugInitializer.get();
  }
  private static java.util.HashMap<java.lang.String, com.google.gwt.resources.client.ResourcePrototype> resourceMap;
  private static com.google.gwt.resources.client.TextResource timepickerCssDebug;
  private static com.google.gwt.resources.client.TextResource timepickerDarkCssDebug;
  private static com.google.gwt.resources.client.TextResource timepickerJsDebug;
  
  public ResourcePrototype[] getResources() {
    return new ResourcePrototype[] {
      timepickerCssDebug(), 
      timepickerDarkCssDebug(), 
      timepickerJsDebug(), 
    };
  }
  public ResourcePrototype getResource(String name) {
    if (GWT.isScript()) {
      return getResourceNative(name);
    } else {
      if (resourceMap == null) {
        resourceMap = new java.util.HashMap<java.lang.String, com.google.gwt.resources.client.ResourcePrototype>();
        resourceMap.put("timepickerCssDebug", timepickerCssDebug());
        resourceMap.put("timepickerDarkCssDebug", timepickerDarkCssDebug());
        resourceMap.put("timepickerJsDebug", timepickerJsDebug());
      }
      return resourceMap.get(name);
    }
  }
  private native ResourcePrototype getResourceNative(String name) /*-{
    switch (name) {
      case 'timepickerCssDebug': return this.@gwt.material.design.addins.client.timepicker.MaterialTimePickerDebugClientBundle::timepickerCssDebug()();
      case 'timepickerDarkCssDebug': return this.@gwt.material.design.addins.client.timepicker.MaterialTimePickerDebugClientBundle::timepickerDarkCssDebug()();
      case 'timepickerJsDebug': return this.@gwt.material.design.addins.client.timepicker.MaterialTimePickerDebugClientBundle::timepickerJsDebug()();
    }
    return null;
  }-*/;
}
